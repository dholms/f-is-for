{"version":3,"sources":["NameEntry.tsx","LetterSelect.tsx","unsplash.ts","WordSelect.tsx","util.ts","Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NameEntry","state","name","onSubmit","evt","preventDefault","length","nameCapitalized","charAt","toUpperCase","slice","props","onChange","event","target","value","setState","classes","this","className","main","Typography","variant","header","Input","input","React","Component","withStyles","theme","createStyles","display","flexDirection","justifyContent","alignItems","marginTop","marginBottom","fontSize","textAlign","LetterSelect","selectLetter","index","onSelect","letters","split","map","letter","i","Button","onClick","findImage","word","a","axios","get","resp","data","results","urls","regular","findWordAndImage","dictName","dict","selectDict","options","img","randomI","Math","floor","random","bible","warAndPeace","fiftyShades","orderOfPhoenix","Error","selectCategory","category","toLowerCase","buttons","btn","width","margin","aOrAn","indexOf","isString","val","Display","str","qs","stringify","window","history","pushState","background","style","backgroundSize","zIndex","color","mixBlendMode","position","top","bottom","left","right","height","App","onNameEnter","onLetterSelect","onWordSelect","console","log","location","params","parse","search","parseInt","WordSelect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25f32821.chunk.js","sourcesContent":["import React, { FormEvent, ChangeEvent } from 'react';\n\nimport { withStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\n\nclass NameEntry extends React.Component<Props, State> {\n\n  state = {\n    name: ''\n  }\n\n  onSubmit = (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    const name = this.state.name\n    if(name.length > 0) {\n      const nameCapitalized = name.charAt(0).toUpperCase() + name.slice(1)\n      this.props.onSubmit(nameCapitalized)\n    }\n  }\n\n  onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.value\n    this.setState({ name })\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <div className={classes.main}>\n        <Typography variant='h1' className={classes.header}>\n          Enter a name\n        </Typography>\n        <form onSubmit={this.onSubmit}>\n          <Input \n            className={classes.input} \n            onChange={this.onChange}\n            value={this.state.name}\n          />\n          </form>\n      </div>\n    )\n  }\n}\n\ninterface Props {\n  onSubmit: (name: string) => void\n  classes: any\n}\n\ninterface State {\n  name: string\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    header: {\n      marginTop: 128,\n      marginBottom: 128\n    },\n    input: {\n      fontSize: 72,\n      '& input': {\n        textAlign: 'center',\n      }\n    }\n  });\n\nexport default withStyles(styles)(NameEntry)\n","import React from 'react';\n\nimport { withStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\nclass LetterSelect extends React.Component<Props, State> {\n\n  selectLetter = (index: number) => {\n    this.props.onSelect(index)\n  }\n\n  render() {\n    const { name, classes } = this.props\n    return (\n      <div className={classes.main}>\n        <Typography variant='h1' className={classes.header}>\n          Select a letter\n        </Typography>\n        <div className={classes.letters}>\n          {name.split('').map((letter, i) =>\n            <Button \n              onClick={() => this.selectLetter(i)} \n              className={classes.letter}\n              key={i}\n            >\n              {letter}\n            </Button>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\ninterface Props {\n  name: string\n  onSelect: (index: number) => void\n  classes: any\n}\n\ninterface State {\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    header: {\n      marginTop: 128,\n      marginBottom: 128\n    },\n    letters: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    letter: {\n      fontSize: 72\n    }\n  });\n\nexport default withStyles(styles)(LetterSelect)\n","import axios from 'axios'\nimport bible from './data/bible.json'\nimport fiftyShades from './data/fifty_shades.json'\nimport orderOfPhoenix from './data/order_of_the_phoenix.json'\nimport warAndPeace from './data/war_and_peace.json'\n\nconst access = 'apOV03z9LRqBrKIDhS0zMrkEhWxwfMJ5KKf50v2XIds'\nexport const findImage = async (word: string): Promise<string | null> => {\n  const resp = await axios.get(`https://api.unsplash.com/search/photos?query=${word}&client_id=${access}&per_page=1`)\n  return resp?.data?.results[0]?.urls?.regular || null\n}\n\ntype resp = {\n  img: string\n  word: string\n}\n\ntype dict = { [letter: string]: string[]}\n\nexport const findWordAndImage = async (dictName: string, letter: string): Promise<resp> => {\n  const dict = selectDict(dictName)\n  const options = dict[letter]\n  let img, word\n  while(!img || !word){\n    const randomI = Math.floor(Math.random() * options.length)\n    word = options[randomI]\n    img = await findImage(word)\n  }\n  return { img, word }\n}\n\nexport const selectDict = (name: string): dict =>  {\n  if(name === 'bible') return bible\n  if(name === 'war_and_peace') return warAndPeace\n  if(name === 'fifty_shades') return fiftyShades\n  if(name === 'order_phoenix') return orderOfPhoenix\n  throw new Error(\"not a valid name\")\n}\n","import React, { FormEvent, ChangeEvent } from 'react';\n\nimport { withStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport Button from '@material-ui/core/Button'\n\nimport { findImage, findWordAndImage } from './unsplash'\n\nclass NameEntry extends React.Component<Props, State> {\n\n  state = {\n    word: ''\n  }\n\n  selectCategory = async (category: string) => {\n    const letter = this.props.name[this.props.index].toLowerCase()\n    const { img, word } = await findWordAndImage(category, letter)\n    this.props.onSubmit(word, img)\n\n  }\n\n  onSubmit = async (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    const img = await findImage(this.state.word)\n    if(img !== null){\n      this.props.onSubmit(this.state.word, img)\n    }\n  }\n\n  onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const word = event.target.value\n    this.setState({ word })\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <div className={classes.main}>\n        <Typography variant='h1' className={classes.header}>\n          Choose a category\n        </Typography>\n        <div className={classes.buttons}>\n          <Button onClick={() => this.selectCategory('bible')} variant='outlined' className={classes.btn}>Bible</Button>\n          <Button onClick={() => this.selectCategory('war_and_peace')} variant='outlined' className={classes.btn}>War and Peace</Button>\n          <Button onClick={() => this.selectCategory('fifty_shades')} variant='outlined' className={classes.btn}>Fifty Shades of Grey</Button>\n          <Button onClick={() => this.selectCategory('order_phoenix')} variant='outlined' className={classes.btn}>Order of the Phoenix</Button>\n        </div>\n        <Typography variant='h1' className={classes.header}>\n          Or type your own\n        </Typography>\n        <form onSubmit={this.onSubmit}>\n          <Input \n            className={classes.input} \n            onChange={this.onChange}\n            value={this.state.word}\n          />\n          </form>\n      </div>\n    )\n  }\n}\n\ninterface Props {\n  name: string\n  index: number\n  onSubmit: (word: string, img: string) => void\n  classes: any\n}\n\ninterface State {\n  word: string\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    header: {\n      marginTop: 64,\n      marginBottom: 64\n    },\n    input: {\n      fontSize: 72,\n      '& input': {\n        textAlign: 'center',\n      }\n    },\n    buttons: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    btn: {\n      fontSize: 16,\n      width: '50%',\n      margin: 8\n    }\n  });\n\nexport default withStyles(styles)(NameEntry)\n","export const aOrAn = (letter: string): string => {\n  const vowels = ['a', 'e', 'f', 'h', 'i', 'l', 'm', 'n', 'o', 'r', 's', 'x']\n  return vowels.indexOf(letter.toLowerCase()) > 0 ? 'an' : 'a'\n}\n\nexport const isString = (val: any): val is string => {\n  return typeof val === 'string'\n}\n","import React from 'react';\n\nimport { withStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography'\n\nimport { aOrAn } from './util'\n\nimport qs from 'query-string'\n\nclass Display extends React.Component<Props, State> {\n\n  componentDidMount() {\n    const { name, index, word, img } = this.props\n    const str = '?' + qs.stringify({name, index, word, img})\n    window.history.pushState({}, '', str)\n  }\n\n  render() {\n    const { name, index, word, img, classes } = this.props\n    const letter = name[index].toUpperCase()\n    return (\n      <div className={classes.main}>\n        <div className={classes.background} style={{ background: `url(\"${img}\") no-repeat center center fixed`, backgroundSize: 'cover' }} >\n          <Typography variant='h1' className={classes.header}>\n            {name} with {aOrAn(letter)} {letter}\n          </Typography>\n          <Typography variant='h1' className={classes.header}>\n            and the {letter} is for \"{word}\"\n          </Typography>\n        </div>\n      </div>\n    )\n  }\n}\n\ninterface Props {\n  name: string\n  index: number\n  word: string\n  img: string\n  classes: any\n}\n\ninterface State { }\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    main: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    header: {\n      marginTop: 128,\n      marginBottom: 128,\n      fontSize: 140,\n      zIndex: 1,\n      color: 'white',\n      textAlign: 'center',\n      mixBlendMode: 'difference'\n    },\n    input: {\n      fontSize: 72,\n      '& input': {\n        textAlign: 'center',\n      }\n    },\n    background: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundSize: 'cover',\n      zIndex: 0\n    },\n    img: {\n      width: '100%',\n      height: '100%',\n    }\n  });\n\nexport default withStyles(styles)(Display)\n","import React from 'react';\nimport 'fontsource-roboto';\n\nimport NameEntry from './NameEntry'\nimport LetterSelect from './LetterSelect'\nimport WordSelect from './WordSelect'\nimport Display from './Display'\n\nimport qs from 'query-string'\n\nimport { isString } from './util'\n\nclass App extends React.Component<Props, State> {\n\n  state: State = {\n    name: null,\n    index: null,\n    word: null,\n    img: null,\n  }\n\n  componentDidMount() {\n    console.log(window.location)\n    const params = qs.parse(window.location.search)\n    if(isString(params.name) && isString(params.index) && isString(params.word) && isString(params.img)) {\n      const { name, word, img } = params\n      const index = parseInt(params.index)\n      this.setState({ name, index, word, img })\n    }\n  }\n\n  onNameEnter = (name: string) => {\n    this.setState({ name })\n  }\n\n  onLetterSelect = (index: number) => {\n    this.setState({ index })\n  }\n\n  onWordSelect = async (word: string, img: string) => {\n    this.setState({ img, word })\n  }\n\n  render() {\n    if(this.state.name !== null) {\n      if(this.state.index !== null) {\n        if(this.state.word !== null && this.state.img !== null) {\n          return <Display\n            name={this.state.name}\n            index={this.state.index}\n            word={this.state.word}\n            img={this.state.img}\n          />\n        }\n        return <WordSelect name={this.state.name} index={this.state.index} onSubmit={this.onWordSelect} />\n      }\n      return <LetterSelect name={this.state.name} onSelect={this.onLetterSelect}/>\n    }\n    return <NameEntry onSubmit={this.onNameEnter}/>\n  }\n}\n\ninterface Props {\n\n}\n\ninterface State {\n  name: string | null\n  index: number | null\n  word: string | null\n  img: string | null\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}